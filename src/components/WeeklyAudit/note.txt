 { serialNumber: 1, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 2, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 3, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 4, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 5, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 6, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 7, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 8, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 9, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 10, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 11, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 12, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },


        <td><input type="date" value={audit.auditDate} onChange={(e) => handleCellChange(e, index, 'auditDate')} /></td>
                            <td><input type="text" value={audit.taskId} onChange={(e) => handleCellChange(e, index, 'taskId')} /></td>


import React, { useState, useEffect } from 'react';
import './CheckAudits.css'; 

const CheckAudits = () => {
    const [audits, setAudits] = useState([
        { serialNumber: 1, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 2, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 3, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 4, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 5, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 6, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 7, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 8, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 9, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 10, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 11, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
        { serialNumber: 12, auditDate: '', taskId: '', auditArea: '', reportObservation: '', remarks: '' },
    ]);
    const [areaNames, setAreaNames] = useState([]);

    // Fetch area names from the backend
    const fetchAreaNames = async () => {
        try {
            const response = await fetch('http://localhost:8001/remote_area_weekly');
            const data = await response.json();
            return data.map(item => item.area);
        } catch (error) {
            console.error('Error fetching area names:', error);
            return [];
        }
    };

    useEffect(() => {
        const getAreaNames = async () => {
            const names = await fetchAreaNames();
            // Deduplicate area names for non repeat
            const uniqueNames = [...new Set(names)];
            setAreaNames(uniqueNames);
        };

        getAreaNames();
    }, []);

    // Function to handle changes in the table cells
    const handleCellChange = (e, rowIndex, columnId) => {
        const newAudits = [...audits];
        newAudits[rowIndex][columnId] = e.target.value;
        setAudits(newAudits);
    };

    return (
        <div style={{ paddingTop: '90px' }}>
            <h2>Check Audits</h2>
            <table className="audit-table">
                <thead>
                    <tr>
                        <th>Serial Number</th>
                        <th>Audit Date</th>
                        <th>Task ID</th>
                        <th>Audit Area</th>
                        <th>Report Observation</th>
                        <th>Remarks</th>
                    </tr>
                </thead>
                <tbody>
                    {audits.map((audit, index) => (
                        <tr key={index}>
                            <td>{index + 1}</td>
                            {index === 0 && <td rowSpan={audits.length}><input type="date" value={audit.auditDate} onChange={(e) => handleCellChange(e, index, 'auditDate')}/></td>}
                            {index === 0 && <td rowSpan={audits.length}><input type="text" value={audit.taskId} onChange={(e) => handleCellChange(e, index, 'taskId')}/></td>}
                            <td>
                                {audit.auditArea || areaNames[index % areaNames.length]}
                            </td>
                            <td><input type="text" value={audit.reportObservation} onChange={(e) => handleCellChange(e, index, 'reportObservation')} /></td>
                            <td><input type="text" value={audit.remarks} onChange={(e) => handleCellChange(e, index, 'remarks')} /></td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default CheckAudits;
